The current version of the plugin is based on RWT version 2.1. The required libraries are resolved
from the Maven central repository using the default
[Grails dependency mechanism (Ivy)|http://grails.org/doc/latest/guide/conf.html#ivy].
An application can override these dependencies manually to use a more recent version of RWT. This
can be useful to test new milestone releases or use new service releases without having to wait for
a new release of the Grails-RWT plugin.

{warning}
The internal mechanisms of the Grails RWT plugin are currently based on the API of version 2.1. If
you use a new RWT version that comes with breaking API changes the plugin won't work anymore. In
order to use the latest RWT version in this case a new release of the Grails RWT plugin is necessary.
{warning}

Here is an example configuration in the BuildConfig.groovy to use the RWT 2.2 milestone release:

{code}
grails.project.dependency.resolution = {

    dependencies {
        compile('org.eclipse.rap:org.eclipse.rap.rwt:2.2.0-M1')
        compile('org.eclipse.rap:org.eclipse.rap.jface:2.2.0-M1')
        compile('org.eclipse.rap:org.eclipse.rap.jface.databinding:2.2.0-M1')
    }
}
{code}

{note}
The RWT JFace libs require three additional dependencies which are currently not present in the Maven
central in the required version. Therefore, these dependencies are bundled in the lib folder of the
RWT plugin. If you manually configure a newer RWT JFace version, you should make sure that the
provided dependencies still satisfy the required version range of the RWT JFace libs. If they
require new versions of the dependency you could grab the libs i.e. from the RAP target platform
and put those in the lib folder of the project, so that they override the outdated versions
provided by the RWT plugin.
{note}
